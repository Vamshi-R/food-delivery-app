/**
 * React => Single Page Application => Just changing the components 
 * component composition -> component inside component
 * All JS functions and variables will be wrapped inside {} (curly braces)
 * App Planning Goes below
 * Header
 *  - Logo
 *  - Nav Items
 * Body
 *  - search
 *  - Restaurant container
 *     - Restaurant Card
 *        -image
 *        -name of restaurant,  cuisine, star rating,delivery time etc.
 * cards
 * Footer
 *  - Copyright
 *  - Links
 *  - Address
 *  - Contact  
 */

/**
 * props : are nothing but normal arguments to a function
 * passing prop to a component is like passing argument to a function
 * props are javascript object
 * practice props destructuring
 */

 /**
 * config driven UI - example Swiggy app
 * UI is driven by config -> config comes from BE
 * Data is the config
 * Data and UI changes based on location is config driven UI
 */

 /**
 * Inline styles
 * another example style = {{backgrondColor: red}}
 * first curly braces suggests there is some javascript code
 * second curly brace is a javascript object 
 */

 /**
 * Difference of syntax 
 * src = "some string"
 * src = {some string + to be concated value}
 * 
 */

 /**
 * key property
 * always we are looping something in JSX we need to provide unique key property
 * example: 
 *   {
                resObj.map((restaurant) => (
                    <RestaurantCards key={restaurant?.id} resData={restaurant} />      
                ))
            }
 *  why do we need key prop ?
 * to avoid re-rendering of all the data when a new data is added to same data we need to pass key prop
 * if we dont keep the keys then it will clear everything and render again because it doesnt know
   where new data to be added.
 * Dont assign indexes to keys, why not use index as key in react ? browse and learn about it.
 * not using keys is not acceptible <<<<<< index as key (atleast not a best practice) 
                 <<<< unique id (best practice)
 */

 /**
 * Two types of exports and imports
 * 1. default - to export single item in one file
 * 2. named - to export multiple items in single file
 //named import
 * import {RES_LOGO} from "../utils/constants" 
 //named export
 *export const LOGO_URL = "https://tse3.mm.bing.net/th?id=OIP.DJXkSF9B--LYE8SM7M8yCAHaHa&pid=Api&P=0&h=180";
 // default export 
 * export default <name of variable>;
 // default import
 * import name of variable from "<path of file>";

 Homework: can we use named export along with default export
 */

 //keep your component short and mimize the code to 100 to 200 lines
 // if it exceeds more than 200 lines break it into multiple components
 // these are best practices

 What is a functional component ? 
  - It is a normal javascript function

 #React Element 
   -  is a plain javascript object


#React Hooks
   - Hook -> is a normal JS utility function given to us by react with some superpowers.
   - useState() -> superpowerful state variables.
                -> whenever a state variable has changes it re renders the component
                -> const [state, ssetState] = useState(default value);
                -> its an destructuring of an array
                -> const arr = useState(some value)
                -> const [state, setState] = arr;

                further break down
                const state = arr[0];
                const setState = arr[1];

              // important - for practical refer Header component Logout and Login button changes
              -> useState re renders the component when state variable is updated > updates the UI 
              -> local variable (JS variable) does not rerender the component 
              -> const [state, setState] = useState()
              -> how can we set value to a constant, once setter function is called entire function(component)
               is invoked again and its a new variable assigned to constant and can be updated with new value.

               // whenever a state variable update, react triggers a reconciliation process(re renders the component)

                this is what happening behind the scenes
   - useEffect() -> is a normal JS functions
                 -> it takes two arguments -> callback function and dependency array
                 -> its called after the component's render cycle is completed
                 -> if you want to perform something after component is rendered useEffect is the one to use.
                 -> first everything inside component is rendered first and then useEffect is called  by default
                 -> useEffect is called on every render of component if no dependency array is there
                 -> if there is a dependency array its behaviour changes
                 -> if there is an empty dependency array => useEffect is only called once on initial render
                 -> if dependency array is [listOfRestaurant] => useEffect is called every time 
                 [listOfRestaurant] is updated.

    - Do's and Dont's -> never create a state variable outside of a functional component
                      -> Always define a state variable at the begining of functional component
                      -> Avoid creating inside if/else/for/functions it will cause inconsistencies in a program

     useEffect(()=>{
        let timer = setInterval(() => {
            console.log("Namste React")
        },1000)

        //called on unmounting lifecycle
        return(() => {
            clearInterval(timer)
            console.log("use effect return called on unmounting")
        })
    },[dependency array -> can provide multiple dependencies -> comma separated]);


# Reconcialition algorithm -> (React Fiber (After React 16))

-> https://github.com/acdlite/react-fiber-architecture 
above link to learn in depth about react fiber

- Reconcialition -> is whenever something changes in UI
- React Fiber -> new way of finding difference and updating DOM

-> For example a container has 7 cards
-> on click we have filtereed 3 cards based on rating, now container has 3 cards
-> old virtual DOM has 7 cards
-> New virtual DOM has 3 cards
-> on change diff algorithm triggers and if found differnce it updates the DOM

- virtual DOM -> is an representation of actual DOM
              -> console.log(<Body />) -> React Element -> Retyrns Object 
              -> It is nothing but normal javascript object

# Diff algorithm

- whenever a state variable is set or something changes in UI
       -> it triggers Diff algorithm
       -> it compares the difference between old virtual DOM(JS object) and new virtual DOM (JS object)
       -> If found difference its updates the DOM else it wont

- Why React is fast because
     - doing efficient DOM manipulation -> bcoz it has virtual DOM
     - bcoz it perform diff algorithm on changes
     - updates the DOM if there is difference


#shimmer UI

-> idea of shimmer UI is you need to show something by default as soon as the page loads

-> load component
-> render with shimmer UI
-> make api call, after the data is recieved
-> render again with help of state variable

# Routing ^6.27.0
-> npm i react-router-dom
-> createBrowserRoute -> to configure Routing
-> RouterProvider -> to provide configuration to our app
-> children array for defining child routes
-> errorElement for loading not found page
-> useRouteError() hook to log error in that page
-> Outlet -> to define where to render child routes -> to load children inside our oultlet
-> Link -> provide by react router dom 

#Link
-> works exactly same as anchor tag
-> Link is an wrapper around anchor tag behind the woods
-> it will not reload the entire page
-> anchor tag will reload the entire page
-> <a href="/"></a> -> will reloads the enitre page
-> <Link to={"/restaurant"+param}>Some Name</Link> -> will just changes/load the component in DOM.

# 2types of routing in web apps

1.client side routing - not using a network call to fetch page/component
2.server side routing - making an network call to get a component/page


# Dynamic routing

ex : path: '/restaurant/:resId' => resId is the dynamic route
-> useParams() -> to read route params -> hook given to us by react router DOM


# class based components
- isnside parent component -> child component
-> parent constructor > parent render > child constructor > child render

# class based components life cycles
  -> constructor
  -> render()
  -> componentDidMount() 
      -> called after component is mounted
      -> use cases
          -> used to make api call or write initial logic
          -> why ?
              -> to quickly render the component then maken and an api call and render it with data.

  Note: https://namastedev.com/learn/namaste-react/ep-08-lets-get-classy 
      URL for lifecycle diagram

 # Mounting Lifecycle
  first contructor and render is called for parent and its children,
  then only component did mount is called for parent and child components
     - constructor called
     - render is called (<HTML Dummy />)
     - DOM and refs are updated (DOM is rendered with dummy data (initial state value))
     - At last Component Didmount (API call) is called (Mounting phase is completed where component is
     rendered quickly with dummy data)

  # Example
  - parent constructor
  - parent render
      -child1 constructor
      -child1 render
      -child2 constructor
      -child2 render
      -child1 component did mount
      -child2 component did mount
  -parent component did mount
 

 # Updating Lifecycle

 -> updating phase starts with setState where state is updated with new value
 -> once setSate is called > state is updated
 -> render is called again (API Data or updated state data)
 -> DOM and refs is updated with new data (<HTML API or updated state value />)
 -> componentDidUpdate is called

# unMounting Lifecycle

-> componentWillUnmount
   -> this lifecycle is called when the component is removed form the webpage
      -> like when we navigate away form that page etc.
      -> when its no more loaded 
      -> to clear time intervals

# Research topics

why we write like below ?
super(props)
contructor(props)
async componentDidUpdate() {}

why cant we write ?

useEffect(async () => {}) // react gives an error


# Optimizing our app
 -steps to making our app performant
 - In CSE we follow " Single Responsibility Principle"
 - Each component should be responsible for single functionality
 - If a component has multiple functionality divide it into two -> Modularity
 - splitting your app into smaller bundles
     - one buundle for search flights
     - one bundle for travel components etc
 - create separate bundle with lazy loading technique
   - lazy loading
     > chunking
     > dynamic bundling
     > code splitting
     > lazy loading
     > on demand loading 
     > dynamic import
   - import lazy from react
   - const Grocery(Component) = lazy(() => import(path of component))
   - import is a function with path as parameter
   - declare lazy outside of your components
   - wrap the lady load compinent with Suspense => refer more to DOCS
      - <Suspense fallback={fallback component} > </Grocery> </Suspense>

 > Refer App.js for Lazy implementation example

# Custom Hooks
 -creating custom hooks makes your code more readable,modular,reusable
 - created a useRestaurantMenu() custom hook and used in RestauraMenu Component.
 - created userOnlineStatus() custom  hook and used in Body component
 #Task
 - create a custom hook to check whether user is online or offline
 - build a dino game when user goes offline in Body component

 #Different ways of writing styles
  > sass and scss
  > bootstrap
  > chakra UI
  > material UI
  > styled componenets > preferred by big companies
  > Ant design
  > Tailwind css

 # Tailwind CSS
  > refer docs for configuration and installation
  > install Tailwing css intellisense vs code editor extension for populating classes on typing

 # Higher order component
     > Higher order component is a function that takes a component and returns a component.
      > means takeas an component as an argument and enhances that component
      > returns a new component

     why do we use it ?
     when do we use it ?
     what component does it take and what component does it return ?

     > Refer Body and RestaurantCards component for example implementation

# Controlled and Uncontrolled components, Lifting the state up